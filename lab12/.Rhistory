comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
names(wolves)
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
wolves
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select Pop", choices=c("AK.PEN", "BAN.JAS", "BC", "DENALI", "ELLES", "GTNP", "INT.AK", "MEXICAN", "MI", "MT", "N.NWT", "ONT", "SE.AK", "SNF", "SS.NWT", "YNP", "YUCH"), selected="AK.PEN"),
plotOutput("plot", width="600px", height="500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select Pop", choices=c("AK.PEN", "BAN.JAS", "BC", "DENALI", "ELLES", "GTNP", "INT.AK", "MEXICAN", "MI", "MT", "N.NWT", "ONT", "SE.AK", "SNF", "SS.NWT", "YNP", "YUCH"), selected="AK.PEN"),
plotOutput("plot", width="600px", height="500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon",
choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
# Define data
df <- data.frame(
sex = c("Male", "Female"),
pop = c("Population 1", "Population 2"),
count = c(10, 20, 15, 25)
)
# Define UI
ui <- fluidPage(
# Title
titlePanel("Bar Plot"),
# Sidebar with dropdown menu for population selection
sidebarLayout(
sidebarPanel(
selectInput("pop", "Select Population", choices = unique(df$pop))
),
# Main panel with plot output
mainPanel(
plotOutput("plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on selected population
filtered_data <- reactive({
df %>% filter(pop == input$pop)
})
# Create plot using ggplot and update based on selected population
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~pop)
})
}
# Run app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
# Title
titlePanel("Bar Plot"),
# Sidebar with dropdown menu for population selection
sidebarLayout(
sidebarPanel(
selectInput("pop", "Select Population", choices = unique(df$pop))
),
# Main panel with plot output
mainPanel(
plotOutput("plot")
)
)
)
# Define server
server <- function(input, output) {
# Filter data based on selected population
filtered_data <- reactive({
df %>% filter(pop == input$pop)
})
# Create plot using ggplot and update based on selected population
output$plot <- renderPlot({
ggplot(filtered_data(), aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~pop)
})
}
# Run app
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select Pop", choices=c("AK.PEN", "BAN.JAS", "BC", "DENALI", "ELLES", "GTNP", "INT.AK", "MEXICAN", "MI", "MT", "N.NWT", "ONT", "SE.AK", "SNF", "SS.NWT", "YNP", "YUCH"), selected="AK.PEN"),
plotOutput("plot", width="600px", height="500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA", pop == input$pop) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select Pop", choices=c("AK.PEN", "BAN.JAS", "BC", "DENALI", "ELLES", "GTNP", "INT.AK", "MEXICAN", "MI", "MT", "N.NWT", "ONT", "SE.AK", "SNF", "SS.NWT", "YNP", "YUCH"), selected="AK.PEN"),
plotOutput("plot", width="600px", height="500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA", pop == input$pop) %>%
ggplot(aes_string(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("pop", "Select Pop",
choices = c("AK.PEN", "BAN.JAS", "BC", "DENALI", "ELLES", "GTNP", "INT.AK",
"MEXICAN", "MI", "MT", "N.NWT", "ONT", "SE.AK", "SNF", "SS.NWT",
"YNP", "YUCH"),
selected = "AK.PEN"),
plotOutput("plot", width = "600px", height = "500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$pop) %>%
ggplot(aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("pop", "Select Pop",
choices = c("AK.PEN", "BAN.JAS", "BC", "DENALI",
"ELLES", "GTNP", "INT.AK", "MEXICAN",
"MI", "MT", "N.NWT", "ONT", "SE.AK",
"SNF", "SS.NWT", "YNP", "YUCH"),
selected = "AK.PEN"),
plotOutput("plot", width = "600px", height = "500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$pop) %>%
ggplot(aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("pop", "Select Pop",
choices = c("AK.PEN", "BAN.JAS", "BC", "DENALI",
"ELLES", "GTNP", "INT.AK", "MEXICAN",
"MI", "MT", "N.NWT", "ONT", "SE.AK",
"SNF", "SS.NWT", "YNP", "YUCH"),
selected = "AK.PEN"),
sliderInput("barsize", "Select the Bar Size", min = 1, max = 5, value = 2, step = 0.5)
plotOutput("plot", width = "600px", height = "500px")
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("pop", "Select Pop",
choices = c("AK.PEN", "BAN.JAS", "BC", "DENALI",
"ELLES", "GTNP", "INT.AK", "MEXICAN",
"MI", "MT", "N.NWT", "ONT", "SE.AK",
"SNF", "SS.NWT", "YNP", "YUCH"),
selected = "AK.PEN"),
sliderInput("barsize", "Select the Bar Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "600px", height = "500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$pop) %>%
ggplot(aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~pop)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("pop", "Select Pop",
choices = c("AK.PEN", "BAN.JAS", "BC", "DENALI",
"ELLES", "GTNP", "INT.AK", "MEXICAN",
"MI", "MT", "N.NWT", "ONT", "SE.AK",
"SNF", "SS.NWT", "YNP", "YUCH"),
selected = "AK.PEN"),
plotOutput("plot", width = "600px", height = "500px")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$pop) %>%
ggplot(aes(x = sex, fill = sex)) +
geom_bar() +
facet_wrap(~pop)
})
}
shinyApp(ui, server)
